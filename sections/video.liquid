{%-  liquid
  assign full_width = section.settings.section_width
  assign desktop_height = section.settings.height_desktop
  assign mobile_height = section.settings.height_mobile
  assign sub_heading = section.settings.sub_heading
  assign heading = section.settings.heading
  assign cover_image = section.settings.cover_image
  assign external_video = section.settings.external_video
  assign video = section.settings.video
  assign autoplay_video = section.settings.autoplay_video
  assign content_position = section.settings.content_position
  assign text_alignment = section.settings.text_alignment
  assign color_text = section.settings.color_text
-%}
{%- style -%}
  .main__section-{{ section.id }}{
    margin-top: 30px;
    margin-bottom: 30px;
  }
  .video-section__box--element{
    color: {{ color_text }};
  }
  .video-section__playicon svg {
    fill: {{ color_text }};
  }
  @media only screen and (min-width: 769px) {
    .main__section-{{ section.id }}{
      margin-top: {{ section.settings.margin_top }}px;
      margin-bottom: {{ section.settings.margin_bottom }}px;
    }
  }
{%- endstyle -%}
<div class="video__wrapper main__section-{{ section.id }}">
  {%- if full_width == false -%}
    <div class="page__width">
    {%- endif -%}
    <div
      class="video-section__main" data-desktop-height="{{ desktop_height }}" data-mobile-height="{{ mobile_height }}">
      <div class="video-section__video--container">
        {%- if external_video != blank and video != blank -%}
          {% render 'video-poster',
            autoplay_video: autoplay_video,
            cover_image: cover_image
          %}
          <div class="native-video__container{% if autoplay_video == false %} video-container__hide{% endif %}">
            {{ video | video_tag: autoplay: autoplay_video, muted: autoplay_video, playsinline: autoplay_video, loop: autoplay_video }}
          </div>
        {%- elsif external_video != blank and video == blank -%}
          {% render 'video-poster',
            autoplay_video: autoplay_video,
            cover_image: cover_image
          %}
          <div class="external-video__container{% if autoplay_video == false %} video-container__hide{% endif %}">
            {%- if external_video.type == 'youtube' -%}
              <iframe
                title="{{ heading }}"
                src="https://www.youtube.com/embed/{{ external_video.id }}?playsinline=1{% if autoplay_video %}&autoplay=1&controls=0&mute=1&loop=1{% endif %}"
                allow=""
                allowfullscreen></iframe>
            {%- endif -%}
            {%- if external_video.type == 'vimeo' -%}
              <iframe
                src="https://player.vimeo.com/video/{{ external_video.id }}?{% if autoplay_video %}autoplay=1&autopause=1&background=1&loop=1&muted=1"{% endif %}
                allowfullscreen
                allow="autoplay"></iframe>
            {%- endif -%}
          </div>
        {%- else -%}
          {% render 'video-poster',
            autoplay_video: autoplay_video,
            cover_image: cover_image
          %}
          <div class="native-video__container{% if autoplay_video == false %} video-container__hide{% endif %}">
            {{ video | video_tag: autoplay: autoplay_video, muted: autoplay_video, playsinline: autoplay_video, loop: autoplay_video }}
          </div>
        {%- endif -%}
      </div>
      
        <div class="video-section__content">
          <div class="video-section__content--box text__position-{{ content_position }}">
            <div class="video-section__box--element text__align-{{ text_alignment }}">
              {%- if sub_heading != blank -%}
                <div class="sub__heading video-section__subheading">
                  {{ sub_heading }}
                </div>
              {%- endif -%}
              {%- if heading != blank -%}
                <div class="video-section__heading">
                  <h1>{{ heading }}</h1>
                </div>
              {%- endif -%}
              <div class="video-section__playicon">
                {% render 'icon-play' %}
              </div>
            </div>
          </div>
        </div>
      
    </div>

    {%- if full_width == false -%}
    </div>
  {%- endif -%}
</div>
{% schema %}
  {
    "name": "t:sections.video.name",
    "class": "main__section",
    "settings": [
      {
        "type": "checkbox",
        "id": "section_width",
        "label": "t:sections.video.settings.section_width.label",
        "default": true
      },
      {
        "type": "select",
        "id": "height_desktop",
        "label": "t:sections.video.settings.section_height_desktop.label",
        "options": [
          {
            "value": "compact",
            "label": "t:sections.video.settings.section_height_desktop.options.compact.label"
          }, {
            "value": "standard",
            "label": "t:sections.video.settings.section_height_desktop.options.standard.label"
          }, {
            "value": "extended",
            "label": "t:sections.video.settings.section_height_desktop.options.extended.label"
          }, {
            "value": "full",
            "label": "t:sections.video.settings.section_height_desktop.options.full.label"
          }
        ],
        "default": "full"
      },
      {
        "type": "select",
        "id": "height_mobile",
        "label": "t:sections.video.settings.section_height_mobile.label",
        "options": [
          {
            "value": "auto",
            "label": "t:sections.video.settings.section_height_mobile.options.auto.label"
          },
          {
            "value": "compact",
            "label": "t:sections.video.settings.section_height_mobile.options.compact.label"
          },
          {
            "value": "standard",
            "label": "t:sections.video.settings.section_height_mobile.options.standard.label"
          },
          {
            "value": "extended",
            "label": "t:sections.video.settings.section_height_mobile.options.extended.label"
          }, {
            "value": "full",
            "label": "t:sections.video.settings.section_height_mobile.options.full.label"
          }
        ],
        "default": "auto"
      },
      {
        "type": "text",
        "id": "sub_heading",
        "label": "t:sections.video.settings.sub_heading.label",
        "default": "Sub Heading"
      }, {
        "type": "text",
        "id": "heading",
        "label": "t:sections.video.settings.heading.label",
        "default": "Video"
      }, {
        "type": "image_picker",
        "id": "cover_image",
        "label": "t:sections.video.settings.cover_image.label",
        "info": "t:sections.video.settings.cover_image.info"
      }, {
        "type": "video_url",
        "id": "external_video",
        "label": "t:sections.video.settings.external_video.label",
        "accept": ["youtube", "vimeo"]
      }, {
        "type": "video",
        "id": "video",
        "label": "t:sections.video.settings.video.label",
        "info": "t:sections.video.settings.video.info"
      }, {
        "type": "checkbox",
        "id": "autoplay_video",
        "label": "t:sections.video.settings.autoplay_video.label",
        "default": false
      },
      {
        "type": "color",
        "id": "color_text",
        "label": "t:sections.video.settings.color_text.label",
        "default": "#111111"
      },
      {
        "type": "header",
        "content": "t:sections.video.settings.header_alignment.label"
      },
      {
        "type": "select",
        "id": "content_position",
        "label": "t:sections.video.settings.header_alignment.content_position.label",
        "options": [
          {
            "value": "top-left",
            "label": "t:sections.video.settings.header_alignment.content_position.options.top_left.label"
          },
          {
            "value": "top-center",
            "label": "t:sections.video.settings.header_alignment.content_position.options.top_center.label"
          },
          {
            "value": "top-right",
            "label": "t:sections.video.settings.header_alignment.content_position.options.top_right.label"
          },
          {
            "value": "center-left",
            "label": "t:sections.video.settings.header_alignment.content_position.options.center_left.label"
          }, {
            "value": "center",
            "label": "t:sections.video.settings.header_alignment.content_position.options.center.label"
          }, {
            "value": "center-right",
            "label": "t:sections.video.settings.header_alignment.content_position.options.center_right.label"
          }, {
            "value": "bottom-left",
            "label": "t:sections.video.settings.header_alignment.content_position.options.bottom_left.label"
          }, {
            "value": "bottom-center",
            "label": "t:sections.video.settings.header_alignment.content_position.options.bottom_center.label"
          }, {
            "value": "bottom-right",
            "label": "t:sections.video.settings.header_alignment.content_position.options.bottom_right.label"
          }
        ],
        "default": "center"
      },
      {
        "type": "select",
        "id": "text_alignment",
        "label": "t:sections.video.settings.header_alignment.alignment.label",
        "options": [
          {
            "value": "left",
            "label": "t:sections.video.settings.header_alignment.alignment.options.left.label"
          }, {
            "value": "center",
            "label": "t:sections.video.settings.header_alignment.alignment.options.center.label"
          }, {
            "value": "right",
            "label": "t:sections.video.settings.header_alignment.alignment.options.right.label"
          }
        ],
        "default": "center"
      },
      {
        "type": "header",
        "content": "t:sections.video.settings.header_spacing.label"
      }, {
        "type": "range",
        "id": "margin_top",
        "min": 0,
        "max": 100,
        "step": 2,
        "unit": "px",
        "label": "t:sections.video.settings.header_spacing.top_spacing.label",
        "default": 16
      }, {
        "type": "range",
        "id": "margin_bottom",
        "min": 0,
        "max": 100,
        "step": 2,
        "unit": "px",
        "label": "t:sections.video.settings.header_spacing.bottom_spacing.label",
        "default": 16
      }
    ],
    "presets": [
      {
        "name": "t:sections.video.presets.name"
      }
    ],
    "disabled_on": {
      "groups": ["header", "footer"]
    }
  }
{% endschema %}