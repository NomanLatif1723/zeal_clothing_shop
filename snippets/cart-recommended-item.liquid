<div class="cart__recommendations-item">
  <div class="cart__recommendations-item--image">
    <img src="{{ product.featured_image | img_url: "100x" }}" width="100" height="100" loading="lazy"/>
  </div>
  <div class="cart__recommendations-item--content">
    <div class="cart__recommendations-item--title"><h3>{{ product.title }}</h3></div>
    <div class="cart__recommendations-item--meta">
      <div class="cart__recommendations-item--price">
        <span class="visually__hidden">{{ 'products.price.sale_price' | t }}</span>
        <span class="product__sale-price">{{ product.price | money_without_trailing_zeros }}</span>
        {%- if product.compare_at_price > product.price -%}
          <span class="visually__hidden">{{ 'products.price.regular_price' | t }}</span>
          <span class="product__compare-price">{{ product.compare_at_price | money_without_trailing_zeros }}</span>
        {%- endif -%}
        {%- if product.selected_or_first_available_variant.unit_price_measurement -%}
          <div data-unit-price class="product__unit-price">
            {%- if product.selected_or_first_available_variant.price > 0 -%}
              {%- if product.selected_or_first_available_variant.unit_price_measurement -%}
                <span>{{ product.selected_or_first_available_variant.unit_price | money }}/
                  {%- if product.selected_or_first_available_variant.unit_price_measurement.reference_value != 1 -%}
                    {{ product.selected_or_first_available_variant.unit_price_measurement.reference_value }}
                  {%- endif -%}
                    {{ product.selected_or_first_available_variant.unit_price_measurement.reference_unit }}
                </span>
              {%- endif -%}
              {%- else -%}
                {{ 'products.free_unit_price' | t }}
            {%- endif -%}
          </div>
        {%- endif -%}
      </div>
      <div class="cart__recommendations-item--variants">
      {%- unless product.has_only_default_variant -%}
        <variant-selects data-section="{{ section.id }}" data-url="{{ product.url }}">
          <div class="product__options product-select__options">
            <select form="{{ product_form_id }}" class="product__select" data-selected-variant id="product-select-{{ forloop.index }}">
              {% for variant in product.variants %}
                <option value="{{ variant.id }}" {% if variant == product.selected_or_first_available_variant %}selected{% endif %}>
                  {{ variant.title }}
                </option>
              {% endfor %}
            </select>
          </div>
        </variant-selects>
      {%- endunless -%}
    </div>
    </div>
    <div class="cart__recommendations-item--button">
      <form id="product-form-{{ product.id }}" action="/cart/add" method="post">
        <input type="hidden" name="id" class="" value="{{ product.selected_or_first_available_variant.id }}">
        {%- liquid
           if template contains 'preorder'
             assign add_to_cart_text = 'products.preorder' | t
           else
             assign add_to_cart_text = 'products.add_to_cart' | t
           endif
        -%}
        <input type="submit" class="btn btn__link btn__primary" value="{% if product.selected_or_first_available_variant.available %}{{ add_to_cart_text }}{%- else -%}{{ 'products.sold_out' | t }}{%- endif -%}">
        <div class="loader__spinner hidden"></div>
      </form>
    </div>
  </div>
</div>
<script>
  function initCartRecommendations() {
  const productRecommendationContainer = document.querySelectorAll('cart-recommendations');
  productRecommendationContainer.forEach(container => {
    if (!container) return;

    const elementTagName = "cart-recommendations";
    if (!customElements.get(elementTagName)) {
      var CartDrawerRecommendations = class extends HTMLElement {
        async connectedCallback() {
          try {
            const response = await fetch(`${window.themeContent.routes.productRecommendation}?product_id=${this.productId}&limit=${this.limit}&section_id=${this.sectionId}`);
            const html = await response.text();

            const div = document.createElement("div");
            div.innerHTML = html;

            const productRecommendationsElement = div.querySelector("cart-recommendations");

            if (productRecommendationsElement && productRecommendationsElement.hasChildNodes()) {
              this.innerHTML = productRecommendationsElement.innerHTML;
            } else {
              this.hidden = true;
            }
          } catch (error) {
            console.error('Error fetching recommendations:', error);
            this.hidden = true;
          }
        }

        get productId() {
          return this.getAttribute("data-product-id");
        }

        get sectionId() {
          return this.getAttribute("data-section-id");
        }

        get limit() {
          return this.getAttribute("data-limit");
        }
      };

      var CartDrawerRecommendations = CartDrawerRecommendations;
      customElements.define(elementTagName, CartDrawerRecommendations);
    }
  });
}
document.addEventListener("DOMContentLoaded", function () {
  initCartRecommendations();
});
</script>